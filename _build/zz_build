#! /bin/bash -e
#
# ----------------------------------------------------------------------
#
# Simple bash script to build zingzong for various platforms
#
# by Benjamin Gerard AKA Ben/OVR
#
# ----------------------------------------------------------------------

me=${0##*/}
error() { echo "$me: $*" >&2; return 2; }

top=$(realpath $(dirname "$0")) # Where this script is located.
[ -n "${arch}" ] ||             # Host triplet
    arch="${PWD##*/}"           # - Default to current dir name

[ -n "${ZZ_MAKEFILE}" ] ||      # Sub project makefile
    ZZ_MAKEFILE=../src/Makefile # - Default to zingzong cli program
#echo ZZ_MAKEFILE=$ZZ_MAKEFILE

DEPLIBS="AO SRATE SOXR"
vars1=( CC LD STRIP PKGCONFIG INSTALL DEBUG PROFILE MAKERULES )
vars3=( CPPFLAGS CFLAGS LDFLAGS LDLIBS gb_CFLAGS gb_LDLIBS gb_LDFLAGS )
vars4=( DESTDIR prefix exec_dir bindir libdir datarootdir datadir
	includedir docdir mandir man1dir man1ext )

vars2=( "${vars3[@]}" "${vars4[@]}" )
for dep in $DEPLIBS; do
    vars2+=( NO_${dep} ${dep}_CFLAGS ${dep}_LIBS )
done

# ----------------------------------------------------------------------
# Print help message on -h --help or --usage
#
Usage() {
    cat <<EOF
 Usage: $me -h
        $me [--no-env] [VAR=VAL ...] [make-args ...]

   This zingzong build script MUST to be call from one of the host
   child directory.

   e.g: mkdir i686-pc-cygwin; cd i686-pc-cygwin; ../$me

   All command line arguments are propagated to make however VAR=VAL are
   intercepted and might be modified.

   The following environment variables are used unless --no-env is set:

EOF
    x='  '
    for var in "${vars1[@]}" "${vars3[@]}"; do
        y="${x}${x:+ }${var}"
        if [ ${#y} -gt 78 ]; then
            echo "$x"; x="   ${var}"
        else
            x="$y"
        fi
    done
    echo "$x"

    cat <<EOF

   For each dependency library name in {${DEPLIBS// /,}}:

   NO_{name} ....... Disable(0)/Enable(1)
   {name}_CFLAGS ... How to compile (usually -I)
   {name}_LIBS ..... How to link (usually -L and -l)

   gb_ family variables will never be override by this script.

   Meaning that if at least one of them is set (even empty) the script
   will not try to tweak the build.

EOF
    exit 0
}

# ----------------------------------------------------------------------
# Parse command line arguments
#
unset first
for arg in "$@"; do
    if [ s${first+et} != set ]; then
        first=x; set --
    fi

    case "$arg" in
        -h | --help | --usage)
            Usage
            ;;
        --no-env)
            unset ${vars1[@]} ${vars2[@]}
            for dep in $DEPLIBS; do
                eval unset NO_${dep} ${dep}_CFLAGS ${dep}_LIBS
            done
            ;;

        *)
            if expr "$arg" : '[[:alpha:]][_[:alnum:]]\+=.*'; then
                var="${arg%%=*}"
                val="${arg#*=}"
                eval $var='"$val"'
            else
                set -- "$@" "$arg"
            fi >/dev/null
            ;;
    esac
done

[[ "$arch" = *-*-* ]] ||
    error "not a valid host triplet -- $arch"

if [ s${MAKERULES+et} != set -a -r makerules ]; then
    MAKERULES=makerules
fi


# ----------------------------------------------------------------------
# Cross-Compile
#
crosscompile=no
gccarch=`gcc -dumpmachine`
test "${gccarch}" = "${arch}" || crosscompile=yes
echo " * Cross-Compiling: ${crosscompile}"

if [ ${crosscompile} = yes ]; then
    ## ---------------------------------------------------
    ## By default setup a somewhat standard gnu/toolchain
    ## cross-compile environment
    ## ---------------------------------------------------

    ## CC
    if [ -z "${CC-}" ]; then
        CC="${arch}"-gcc
        xx=`which "$CC"`
        echo " * CC: \"$xx\""
    fi

    ## LD
    if [ -z "${LD-}" ]; then
        LD="${arch}"-ld
        xx=`which "$LD"`
        echo " * LD: \"$xx\""
    fi

    ## STRIP
    if [ -z "${STRIP-}" ]; then
        STRIP="${arch}"-strip;
        xx=`which "$STRIP"`
        echo " * STRIP: \"$xx\""
    fi

    ## PKGCONFIG
    if [ -z "${PKGCONFIG-}" ]; then
        PKGCONFIG="${arch}"-pkg-config
        xx=`which "$PKGCONFIG"`
        echo " * PKGCONFIG: \"$xx\""
    fi

fi

PKGCONFIG="${PKGCONFIG:-pkg-config}"

# ----------------------------------------------------------------------
# Architecture specific
#
#  Do that only if none of the gb_ family flags is set. Otherwise the
#  script assumes the user has taken control over the gory details of
#  the build and leave it alone.
#

if [ -z "${gb_CFLAGS+set}${gb_LDFLAGS+set}${gb_LDLIBS+set}" ]; then
    case "$arch" in
        *-w64-mingw32)
            # For win32 platform try to build fully static (even for dlls)
            gb_CFLAGS="-static"
            gb_LDFLAGS="-static -static-libgcc"
            PKGCONFIG+=' --static'
            echo " *******************************${arch//?/*}*"
            echo " * Forcing all static mode for $arch *"
            echo " *******************************${arch//?/*}*"
            ;;
        *-*-*)
            true ;;
        *)
            error "WTH ??? -- $arch" ;;
    esac
else
    echo " * At least one of the gb_* flags is set."
fi

pkgconfig="${PKGCONFIG} --short-errors"

# ----------------------------------------------------------------------
# Dependency libraries
#
for var in $DEPLIBS; do
    if eval test -n '"${NO_'${var}'}"'
    then
        # NO_${DEP} is *NOT* empty
        if eval test x\"\$NO_${var}\" != x0; then
           eval unset ${var}_CFLAGS ${var}_LIBS
           eval NO_${var}=1
        fi
    else
        # NO_${DEP} is not set or empty
        unset add
        if eval test s'${'NO_${var}'+et}' = set; then
            add=yes
        fi

        case $var in
            AO) mod=ao; add=${add-must} ;;
            SOXR) mod=soxr; add=${add-yes} ;;
            SRATE) mod=samplerate; add=${add-no} ;;
            *) error "WTH ??? -- $var"
        esac

        if modversion=`$pkgconfig $mod --modversion`; then
            echo " * Found $mod $modversion"
            case "$add" in
                yes | must)
                    eval NO_$var=0 ;;
                no)
                    echo " * Use \"NO_$var=0\" for zingzong to support $mod"
                    eval unset NO_$var
                    ;;

                *) error "WTH ??? $var $mod $add" ;;
            esac
        elif [ $add = must ]; then
            echo " * Use \"NO_$var=1\" for really build without $mod"
            error "bailing out due to previous message"
        fi
    fi
done

# ----------------------------------------------------------------------
# Variables that CAN NOT be empty
#
for var in ${vars1[@]}; do
    if eval test -n \"\${$var-}\"; then
        eval set -- '"$@"' \"$var=\${$var}\"
    fi
done

# ----------------------------------------------------------------------
# Variables that CAN be empty
#
for var in ${vars2[@]}; do
    if eval test s\${$var+et} = set; then
        eval set -- '"$@"' \"$var=\${$var}\"
    fi
done

# ----------------------------------------------------------------------
# Let's do this
#
set --\
    -f ${top}/${ZZ_MAKEFILE}\
    "$@"

echo "> make"
for arg in "$@"; do
    echo "  \"$arg\""
done
echo
make "$@"
version=`$SHELL ${top}/../vcversion.sh`

out="# ${project:-zingzong} ${version} for ${arch} #"
cat <<EOF

 ${out//?/#}
 ${out}
 ${out//?/#}
EOF
